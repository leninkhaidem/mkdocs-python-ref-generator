{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mkdocs-py-ref-gen","text":"<p>mkdocs plugin to generate reference mdfiles and summary of python package(s)</p> <p>It's a wrapper plugin built using mkdocs-gen-file and mkdocs-literate-nav</p> pip install mkdocs-py-ref-gen <p>The plugin requires mkdocstrings[python]</p> <pre><code>pip install 'mkdocstrings[python]'\n</code></pre>"},{"location":"#usage","title":"usage","text":"plugin config<pre><code>plugins:\n  - py-ref-gen:\n      modules:\n        - name: \"my_module\"\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>A sample plugin configuration looks like this.</p> mkdocs.yml<pre><code>site_name: mkdocs-py-ref-gen\ntheme:\n  name: material\n\nplugins:\n  - search\n  - mkdocstrings\n  - py-ref-gen:\n      modules:\n        - name: \"my_module\"\n          exclude_dirs:\n            - \"some/dir/within/my_module\"\n          exclude-files:\n            - \"some_file.py\"\n            - \"another/file.py\"\n          options:          # these options are mkdocstring python options\n            key: value\n  - literate-nav:\n      nav_file: SUMMARY.md\n  - section-index\nnav:\n  - Home: index.md\n  - API Reference: reference/\n</code></pre>"},{"location":"usage/#how-does-it-work","title":"How does it work ?","text":"<p>The plugin uses mkdocs-gen-file and mkdocs-literate-nav to generate corresponding markdown files containing reference md files by following the recipe detailed here</p> <p>For a package having the following structure</p> Python package<pre><code>my_test_package\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 module_a.py\n\u251c\u2500\u2500 test_pkg\n\u2502   \u251c\u2500\u2500 _private_mod.py\n\u2502   \u251c\u2500\u2500 mod_a.py\n\u2502   \u2514\u2500\u2500 mod_b.py\n\u2514\u2500\u2500 test_pkg_exclude\n    \u251c\u2500\u2500 mod_a.py\n</code></pre> <p>Generated markdown reference files are as follows</p> Generated reference files<pre><code>docs/reference\n\u251c\u2500\u2500 SUMMARY.md\n\u2514\u2500\u2500 my_test_package\n    \u251c\u2500\u2500 module_a.md\n    \u251c\u2500\u2500 test_pkg\n    \u2502   \u251c\u2500\u2500 mod_a.md\n    \u2502   \u2514\u2500\u2500 mod_b.md\n    \u2514\u2500\u2500 test_pkg_exclude\n        \u251c\u2500\u2500 mod_a.md\n        \u2514\u2500\u2500 mod_b.md\n</code></pre> <p>Note</p> <p>The plugin does not generate module reference for files starting with _ as they are treated as private modules.</p>"},{"location":"usage/#sample-generated-reference-file","title":"Sample generated reference file","text":"<pre><code>$ cat docs/reference/my_test_package/module_a.md\n\n::: my_test_package.module_a\n    handler: python\n    options:\n      show_root_heading: false\n      allow_inspection: false\n      show_root_full_path: true\n      find_stubs_package: true\n      show_source: false\n      show_submodules: false\n      members_order: source\n      inherited_members: false\n      summary:\n        attributes: true\n        methods: true\n        classes: true\n        modules: false\n      imported_members: true\n      docstring_section_style: spacy\n      relative_crossrefs: true\n      show_root_members_full_path: false\n      show_object_full_path: false\n      annotations_path: source\n      show_category_heading: true\n      group_by_category: true\n      show_signature_annotations: true\n      separate_signature: true\n      signature_crossrefs: true\n</code></pre>"},{"location":"usage/#sample-summary-files","title":"Sample summary files","text":"<pre><code>$ cat docs/reference/SUMMARY.md\n\n* my_test_package\n    * [module_a](my_test_package/module_a.md)\n    * test_pkg\n        * [mod_a](my_test_package/test_pkg/mod_a.md)\n        * [mod_b](my_test_package/test_pkg/mod_b.md)\n    * test_pkg_exclude\n        * [mod_a](my_test_package/test_pkg_exclude/mod_a.md)\n        * [mod_b](my_test_package/test_pkg_exclude/mod_b.md)\n</code></pre>"},{"location":"usage/#configuration-options","title":"Configuration options","text":"<ul> <li><code>name</code>: The name of the python module. It should exist in the python path. Works if loaded through mkdocstrings python path option mentioned here</li> <li><code>exclude_dirs</code>: Path substring or folder name. The plugin skips generation of the content from these folders if any.</li> <li><code>exclude_files</code>: Path substring or file names to be excluded</li> <li><code>option</code>: This is the mkdocstring[python] configuration option documented here. The plugin uses some default options as shown here. This options are applied locally to all the generated files. <code>option</code> field is boolean or dictionary. default value is set to true which adds the default options. If set to false, options will not be added.</li> </ul> <p>Note</p> <p>Local options overrides global mkdocstring python options if specified.</p>"},{"location":"usage/#command-line-utility","title":"Command line utility","text":"<p><code>py-ref-gen</code> command line utility can be used to generate the files if further customization is needed.</p> py-ref-gen utility<pre><code>Usage: py-ref-gen [OPTIONS]\n\nOptions:\n  --version                  Show the version and exit.\n  -p, --path TEXT            Path to the module\n  -n, --name TEXT            Name of the module  [required]\n  -ef, --exclude-files TEXT  Files to exclude\n  -ed, --exclude-dirs TEXT   Directories to exclude\n  --help                     Show this message and exit.\n</code></pre> <p>This must be executed from the root folder where mkdocs.yml is located. Generated files will be saved under docs/reference.</p>"}]}